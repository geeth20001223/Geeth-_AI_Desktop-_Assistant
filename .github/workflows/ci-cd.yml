name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  python-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - run: pytest

  node-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:unit

  node-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:integration

  node-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:e2e

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up CodeQL
        uses: github/codeql-action/setup@v3
      - name: Initialize CodeQL analysis
        run: |
          mkdir -p .github/workflows/codeql
          codeql database create --language=python,cpp .
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3
      - name: Run DAST (OWASP ZAP)
        run: |
          echo "Running DAST scan"
          # Replace the URL with your app's URL (e.g., staging or test)
          zap-cli quick-scan --url http://your-app-url
          # Capture and check for high vulnerabilities in the result file
          if grep -q "High" results.xml; then
            echo "High vulnerabilities found in DAST scan!"
            exit 1  # Fail the build if high vulnerabilities are found
          fi
      - name: Run SCA (Snyk)
        run: snyk test --all-projects --fail-on-vulns

  deploy:
    runs-on: ubuntu-latest
    needs:
      - python-build
      - node-unit-tests
      - node-integration-tests
      - node-e2e-tests
      - security-scan
    steps:
      - uses: actions/checkout@v3
      - run: echo "âœ… Deployment step here"
