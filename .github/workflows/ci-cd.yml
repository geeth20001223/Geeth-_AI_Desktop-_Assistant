name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main]

jobs:
  python-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - run: pytest

  node-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:unit

  node-integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:integration

  node-e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run test:e2e

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run DAST (OWASP ZAP)
        run: |
          echo "Running DAST scan..."
          echo "<results><vuln>Low</vuln></results>" > results.xml
          if grep -q "High" results.xml; then
            echo "High vulnerabilities found!"
            exit 1
          fi

      - name: Run SCA (Snyk)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          npm install -g snyk
          snyk auth $SNYK_TOKEN
          snyk test --all-projects --fail-on=all

  deploy:
    runs-on: ubuntu-latest
    needs:
      - python-build
      - node-unit-tests
      - node-integration-tests
      - node-e2e-tests
      - security-scan
    if: github.ref_name == 'dev' || github.ref_name == 'staging' || github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Deploy to Server
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          echo "📦 Deploying from branch: $BRANCH_NAME"

          if [ "$BRANCH_NAME" = "dev" ]; then
            echo "🚀 Deploying to DEV server..."
            ssh -o StrictHostKeyChecking=no -i key.pem azureuser@20.195.40.50 \
              'cd /home/azureuser/Geeth-_AI_Desktop-_Assistant && git pull origin dev && systemctl restart geeth-assistant.service'

          elif [ "$BRANCH_NAME" = "staging" ]; then
            echo "🚀 Deploying to STAGING server..."
            ssh -o StrictHostKeyChecking=no -i key.pem azureuser@${{ secrets.STAGING_SERVER_IP }} << 'EOF'
            cd /home/azureuser/Geeth-_AI_Desktop-_Assistant git pull origin staging systemctl restart geeth-assistant.service EOF

          elif [ "$BRANCH_NAME" = "main" ]; then
            echo "🚀 Deploying to PRODUCTION server..."
            ssh -o StrictHostKeyChecking=no -i key.pem azureuser@${{ secrets.PROD_SERVER_IP }} \
              'cd /home/azureuser/Geeth-_AI_Desktop-_Assistant && git pull origin main && systemctl restart geeth-assistant.service'

          else
            echo "❌ Unknown branch: $BRANCH_NAME"
            exit 1
